bot.use(session());

bot.command('reset', (ctx) => {
  // Initialize ctx.session if not yet set
  if (!ctx.session) {
    ctx.session = {};
  }

  // Initialize ctx.session.counter if not yet set
  if (!ctx.session.counter) {
    ctx.session.counter = {};
  }

  // Reset the user's count
  ctx.session.counter[ctx.from.id] = 0;

  return ctx.reply('Tu contador ha sido reiniciado.');
});

bot.on('text', (ctx) => {
  // Initialize ctx.session if not yet set
  if (!ctx.session) {
    ctx.session = {};
  }

  // Initialize ctx.session.counter if not yet set
  if (!ctx.session.counter) {
    ctx.session.counter = {};
  }

  const text = ctx.message.text.toLowerCase();

  if (text === 'hola') {
      // If user says 'hola', increment their count
      ctx.session.counter[ctx.from.id] = (ctx.session.counter[ctx.from.id] || 0) + 1;
      return ctx.reply(`Has dicho 'hola' ${ctx.session.counter[ctx.from.id]} veces.`);
  }
});

bot.on('text', (ctx) => {
  const number = parseInt(ctx.message.text);
  if (!isNaN(number)) {
    ctx.session.numberOfSpecialties = number;
    ctx.reply(`¡Genial! Ahora selecciona ${number} especialidades.`);
    // Llamada a la función playCategoryCommand
    playCategoryCommand(ctx);
  } else {
    ctx.reply('Por favor, ingresa un número.');
  }
});

bot.action(/specialty:(.+)/, async (ctx) => {
  const selectedSpecialty = ctx.match[1];

  // Inicializar la lista de especialidades si no existe
  ctx.session.selectedSpecialties = ctx.session.selectedSpecialties || [];

  // Agregar la especialidad seleccionada a la lista
  ctx.session.selectedSpecialties.push(selectedSpecialty);

  await ctx.answerCbQuery();

  // Comprobar si el usuario ha seleccionado el número correcto de especialidades
  if (ctx.session.selectedSpecialties.length < ctx.session.numberOfSpecialties) {
    ctx.reply(`Has seleccionado: ${selectedSpecialty}. Por favor, selecciona ${ctx.session.numberOfSpecialties - ctx.session.selectedSpecialties.length} más.`);
  } else {
    ctx.reply(`Has seleccionado tus ${ctx.session.numberOfSpecialties} especialidades: ${ctx.session.selectedSpecialties.join(', ')}.`);
  }
});


nuevos datos:
const { Markup } = require("telegraf");
const loadData = require("../utils/loadData");

const clinicalCases = loadData("clinicalCase.json");


function playCategoryCommand(ctx) {
  const specialties = clinicalCases.map((c) => c.specialty);

  const specialtyButtons = specialties.map((specialty) =>
    Markup.button.callback(specialty, `specialty:${specialty}`)
  );

  const keyboard = Markup.inlineKeyboard(specialtyButtons, { columns: 2 });

  ctx.reply("Elige una especialidad:", keyboard);
}

module.exports = playCategoryCommand;

manera de llamadas a la base de datos
bot.action(/specialty:(.+)/, async (ctx) => {
  const selectedSpecialty = ctx.match[1];
  ctx.session.selectedSpecialty = selectedSpecialty;
  await ctx.answerCbQuery();
  ctx.reply(`Has seleccionado la especialidad: ${selectedSpecialty}`);
});

bot.command("firebase", async (ctx) => {
  try {
    const doc = await db
      .collection("clinicalCase")
      .doc("1hsmkGQx5sdibpsddxls")
      .get();
    if (doc.exists) {
      ctx.reply("Conexion exitosa");
    } else {
      ctx.reply("No se encontró el documento");
    }
  } catch (error) {
    ctx.reply("Error al acceder a la base de datos: " + error.message);
  }
});

bot.command("escribir", async (ctx) => {
  try {
    const aTuringRef = db.collection("users").doc("aturing");
    await aTuringRef.set({
      first: "Alan",
      middle: "Mathinson",
      last: "Turing",
      born: 1912
    });
    ctx.reply("Escritura en la base de datos exitosa");
  } catch (error) {
    ctx.reply("Error al escribir en la base de datos: " + error.message);
  }
});

bot.command("leer", async (ctx) => {
  try {
    const snapshot = await db.collection("users").get();
    snapshot.forEach((doc) => {
      const data = doc.data();
      let message = `ID: ${doc.id}\n\n`;
      Object.keys(data).forEach((key) => {
        message += `• ${key}: ${data[key]}\n`;
      });
      ctx.replyWithMarkdownV2(message);
    });
  } catch (error) {
    ctx.reply("Error al leer la base de datos: " + error.message);
  }
});

// bot.on('message', async (ctx) => {
//   if (!ctx.message.successful_payment) {
//     return;  // if it's not a successful payment message, we just ignore it
//   }

//   let sender = ctx.from;
//   const userRef = db.collection("users").doc(String(sender.id));
//   const doc = await userRef.get();

//   // Actualizamos la información del usuario en la base de datos.
//   if(doc.exists) {
//     await userRef.set({ paid: true }, { merge: true });
//   } else {
//     await userRef.set({ paid: true });
//   }

//   // Enviamos un mensaje al usuario para confirmar su pago.
//   ctx.reply("¡Gracias por tu pago! Ahora tienes acceso total al bot.");
// });

bot.use(async (ctx, next) => {
  if (ctx.message && (ctx.message.text == "/start" || ctx.message.text == "/pay")) {
    return next();  // if it's one of those, skip payment check and go to the next middleware or command handler
  }

  let sender = ctx.from;
  const userRef = db.collection("users").doc(String(sender.id));
  const doc = await userRef.get();
  let dbUser = doc.exists ? doc.data() : null;

  if(dbUser && dbUser.paid){
    return next();
  }

  if (!ctx.updateType || ctx.updateType === 'message') {
    await ctx.reply("Tienes que pagar para usar este bot. Usa el comando /pay");
  }
  return;
});